plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    // id 'signing'
    id 'groovy'
    id 'org.unbroken-dome.test-sets'
    id 'io.wusa.semver-git-plugin'
}

apply from: './platform.gradle'

group = 'com.gpaglia.scalatest'
description = 'gradle-scalatest is a Gradle plugin for executing scalatest tests'

version = semver.info

ext {
    websiteUrl = 'https://github.com/gpaglia/gradle-scalatest'
    sourceUrl = 'https://github.com/gpaglia/gradle-scalatest.git'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenLocal()
    mavenCentral()
}

testSets {
    libraries { testCommon }
    unitTest { imports libraries.testCommon }
    integrationTest { imports libraries.testCommon }
    functionalTest {
        imports libraries.testCommon
        extendsFrom integrationTest
    }
}

// mixed java - groovy compilations, let's have them handled by groovyCompile
sourceSets {
    main {
        java {
            srcDirs = []
        }
        groovy {
            srcDirs = ["src/main/java", "src/main/groovy"]
        }
    }
}


// Make all tests use JUnit 5
tasks.withType(Test) {
    useJUnitPlatform()
}

dependencies {
    implementation localGroovy()

    // scalatest framework
    implementation("com.gpaglia.scalatest.framework:scalatest-framework:${plugin__scalatestFrameworkVersion}") {
        // slf4j compatible log backend provided by gradle
        exclude group: "ch.qos.logback", module: "logback-classic"
    }

    implementation "org.apache.commons:commons-lang3:${plugin__commonsLang3Version}"

    // the junit5 bom
    api(platform("org.junit:junit-bom:${plugin__junitVersion}"))

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly files('src/test/lib/testutils.jar')

    testImplementation "org.hamcrest:hamcrest:${plugin__hamcrestVersion}"
    testImplementation "org.mockito:mockito-core:${plugin__mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${plugin__mockitoVersion}"

    // test common

    // test fixtures from framework
    testCommonApi testFixtures("com.gpaglia.scalatest.framework:scalatest-framework:${plugin__scalatestFrameworkVersion}") {
        // slf4j compatible log backend provided by gradle
        exclude group: "ch.qos.logback", module: "logback-classic"
    }
    testCommonImplementation testFixtures("com.gpaglia.scalatest.framework:scalatest-framework:${plugin__scalatestFrameworkVersion}") {
        // slf4j compatible log backend provided by gradle
        exclude group: "ch.qos.logback", module: "logback-classic"
    }

    // test samples from framework
    testCommonRuntimeOnly ("com.gpaglia.scalatest.framework:scalatest-framework:${plugin__scalatestFrameworkVersion}:samples") {
        // slf4j compatible log backend provided by gradle
        exclude group: "ch.qos.logback", module: "logback-classic"
    }

    testCommonImplementation localGroovy()
    testCommonImplementation gradleApi()
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    from "$buildDir/docs/groovydoc"
    archiveClassifier.set('groovydoc')
}

/*
task sourcesJar(type: Jar) {
    //noinspection GroovyAssignabilityCheck
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}
*/

test.dependsOn(jar)

artifacts {
    archives groovydocJar
    archives sourcesJar
}


task showMyVersion() { doLast { println(project.version) } }

gradlePlugin {
    testSourceSets sourceSets.functionalTest
    //noinspection GroovyAssignabilityCheck
    plugins {
        scalaTest {
            id = 'com.gpaglia.scalatest.gradle-scalatest'
            implementationClass = 'com.gpaglia.scalatest.ScalaTestPlugin'
            description = project.description
        }
    }
}

publishing {
    repositories {
        mavenLocal()
    }
}

